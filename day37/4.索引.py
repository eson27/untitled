'''
数据准备
    读取一次硬盘的开销

    新的数据结构--树  根节点root  分支节点branch 叶子节点leaf
        二叉树 树的高度
        平衡树 b 树 查找范围小
        b+ 树  b树 |尽量矮|加入双向地址
            mysql 即有b 和b+树的优点

 mysql数据存储的两种方式
    聚集索引（或称聚簇索引） 所有信息在叶子节点 只有 innodb 必有且仅有一个聚集索引 永远是主键（没有设主键innodb内建一个，不可见）
    非聚集索引（非聚簇索引、辅助索引) innodb  myisam  只存索引和主键的值

索引的创建和删除
    创建主键 primary key - 创建一个聚集索引 - 不重复 非空
    创建 unique - 创建辅助索引 - 不重复
    添加一个普通索引
        create index  索引名 on 表（字段);
            use day 40;
                create index index_name on dep(name);
    删除
        drop index index_name on dep;

正确使用索引
    不命中索引的情况--查询慢原因
        没有命中--查询列慢 没有建索引
        创建列重复大--率小于1/10
        范围大-- >10000 |between 10000 and 100000000
        条件列参与计算|使用函数-- select * from dep id*10=10000;
        like --语句 like 'a%' 快 |like '%a'慢
        逻辑语句 -- 索引 and  非索引- 快 | or 慢
    联合索引- 最左前缀原则，有范围条件出现开始索引作引消失
        create index in_con from t1 ( id,name,email)

    从库的角度
        搭建集群
        读写分离
        分库

    从表的角度
        合理安排表与表之间的关系 该拆拆该分分
        把固定长度的字段放前边
        尽量使用char（） 而不是varchar（）

    从操作的角度
        尽量在where时做约束一个较小范围
            where a between value1 and value2

        尽量使用连表查询代替子查询

        修改|删除时尽量使用主键

        合理使用和创建索引
            创建
                1.选择区分度较大的列作索引
                2.尽量选择长度短的列作索引
                3.不要创建不必要的索引（删改时要同时更新多颗树，耗时），不用及时删除索引
            使用索引
                1.查询字段不是索引字段
                2.在条件中使用范围 范围大慢
                3.like 'a%'命中索引 |like '%a'命中索引
                4.条件列不能计算|也不能使用函数
                5. and | or
                    and 可以命中索引
                    or 一般不能命中，只有都有索引才能命中
                6.联合索引
                    遵循最左前缀原则，且从出现范围条件开始索引失效
                7.条件中数据类型和实际字段的类型必须一致
                8.select 字段中应该包含 order by 中的字段
                    因为select 比 order by 先执行
    覆盖索引 --索引过程中不需要回表(要什么查什么）
        select id from 表 where id >100000;
        select max(id) from 表 where id >100000;
        select count(id) from 表 where id >10000;、

    合并索引：分别创建的两个索引在某一次查询中临时合并成一条索引\
        类似a=1 or b=2
    执行计划: explain select 语句，能够查看sql语句有没有按照预期执行，可以查看索引的使用情况，type等级

    慢查询优化
        首先从sql 的角度优化
            把每一句话单独执行，找到效率低的表，优化这句sql
            了解业务场景，适当创建索引，帮助查询
            尽用连表代替子查询
            确认命中索引的情况
        考虑修改表的结构
            拆表
            把固定的字段往前调整
        使用执行计划explain select 观察sql的type通过以上调整是否有效

    mysql的慢日志
        在mysql的开启并设置一下
        在超过设定时间之后，这条sql总是会被记录下来
        查看这些记录针对性调整优化










'''